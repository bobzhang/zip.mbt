// Auto-generated test cases for LZ77 implementation
// Generated by generate_lz77_test_data.py
//
// These tests verify LZ77 string matching against a Python reference implementation.

///|
/// Test case 1: simple_repeat
/// Simple repeated phrase
/// Input length: 23, Expected matches: 8
test "lz77_reference_simple_repeat" {
  // Input data
  let input = b"\x68\x65\x6c\x6c\x6f\x20\x77\x6f\x72\x6c\x64\x20\x68\x65\x6c\x6c\x6f\x20\x77\x6f\x72\x6c\x64"

  // Find all matches using MoonBit implementation
  let actual_matches = find_all_matches(input)

  // Verify we found the expected number of matches
  @json.inspect(actual_matches.length(), content=8)

  // Verify first few matches (to avoid huge test output)
  // First match: backref=786443, pos=12
  if actual_matches.length() > 0 {
    let (first_backref, first_pos) = actual_matches[0]
    @json.inspect((first_backref, first_pos), content=[786443, 12])
  }
}

///|
/// Test case 2: long_repeat
/// Long repeated alphabet sequence
/// Input length: 260, Expected matches: 231
test "lz77_reference_long_repeat" {
  // Input data
  let input = b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a"

  // Find all matches using MoonBit implementation
  let actual_matches = find_all_matches(input)

  // Verify we found the expected number of matches
  @json.inspect(actual_matches.length(), content=231)

  // Verify first few matches (to avoid huge test output)
  // First match: backref=1704170, pos=26
  if actual_matches.length() > 0 {
    let (first_backref, first_pos) = actual_matches[0]
    @json.inspect((first_backref, first_pos), content=[1704170, 26])
  }
}

///|
/// Test case 3: no_matches
/// Random data with no repeated patterns
/// Input length: 100, Expected matches: 0
test "lz77_reference_no_matches" {
  // Input data
  let input = b"\x39\x0c\x8c\x7d\x72\x47\x34\x2c\xd8\x10\x0f\x2f\x6f\x77\x0d\x65\xd6\x70\xe5\x8e\x03\x51\xd8\xae\x8e\x4f\x6e\xac\x34\x2f\xc2\x31\xb7\xb0\x87\x16\xeb\x3f\xc1\x28\x96\xb9\x62\x23\x17\x74\x94\x28\x77\x33\xc2\x8e\xe8\xba\x53\xbd\xb5\x6b\x88\x24\x57\x7d\x53\xec\xc2\x8a\x70\xa6\x1c\x75\x10\xa1\xcd\x89\x21\x6c\xa1\x6c\xff\xca\xea\x49\x87\x47\x7e\x86\xdb\xcc\xb9\x70\x46\xfc\x2e\x18\x38\x4e\x51\xd8\x20\xc5"
  // No matches expected for this test case
  let actual_matches = find_all_matches(input)
  @json.inspect(actual_matches.length(), content=0)
}

///|
/// Test case 4: overlapping
/// Overlapping matches with 'aaa'
/// Input length: 11, Expected matches: 4
test "lz77_reference_overlapping" {
  // Input data
  let input = b"\x61\x61\x61\x20\x61\x61\x61\x20\x61\x61\x61"

  // Find all matches using MoonBit implementation
  let actual_matches = find_all_matches(input)

  // Verify we found the expected number of matches
  @json.inspect(actual_matches.length(), content=4)

  // Verify first few matches (to avoid huge test output)
  // First match: backref=262151, pos=4
  if actual_matches.length() > 0 {
    let (first_backref, first_pos) = actual_matches[0]
    @json.inspect((first_backref, first_pos), content=[262151, 4])
  }
}

///|
/// Test case 5: different_distances
/// Same pattern at different distances
/// Input length: 21, Expected matches: 2
test "lz77_reference_different_distances" {
  // Input data
  let input = b"\x74\x65\x73\x74\x31\x32\x33\x74\x65\x73\x74\x34\x35\x36\x74\x65\x73\x74\x37\x38\x39"

  // Find all matches using MoonBit implementation
  let actual_matches = find_all_matches(input)

  // Verify we found the expected number of matches
  @json.inspect(actual_matches.length(), content=2)

  // Verify first few matches (to avoid huge test output)
  // First match: backref=458756, pos=7
  if actual_matches.length() > 0 {
    let (first_backref, first_pos) = actual_matches[0]
    @json.inspect((first_backref, first_pos), content=[458756, 7])
  }
}

///|
/// Test case 6: max_match_length
/// Test maximum match length (258)
/// Input length: 302, Expected matches: 295
test "lz77_reference_max_match_length" {
  // Input data
  let input = b"\x78\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x79"

  // Find all matches using MoonBit implementation
  let actual_matches = find_all_matches(input)

  // Verify we found the expected number of matches
  @json.inspect(actual_matches.length(), content=296)

  // Verify first few matches (to avoid huge test output)
  // First match: backref=65794, pos=2
  if actual_matches.length() > 0 {
    let (first_backref, first_pos) = actual_matches[0]
    @json.inspect((first_backref, first_pos), content=[65794, 2])
  }
}

///|
/// Test case 7: min_match_boundary
/// Test minimum match length (3)
/// Input length: 8, Expected matches: 2
test "lz77_reference_min_match_boundary" {
  // Input data
  let input = b"\x61\x62\x20\x61\x62\x20\x61\x62"

  // Find all matches using MoonBit implementation
  let actual_matches = find_all_matches(input)

  // Verify we found the expected number of matches
  @json.inspect(actual_matches.length(), content=2)

  // Verify first few matches (to avoid huge test output)
  // First match: backref=196613, pos=3
  if actual_matches.length() > 0 {
    let (first_backref, first_pos) = actual_matches[0]
    @json.inspect((first_backref, first_pos), content=[196613, 3])
  }
}

///|
/// Test case 8: hash_collisions
/// Test hash collision handling
/// Input length: 16, Expected matches: 1
test "lz77_reference_hash_collisions" {
  // Input data
  let input = b"\x74\x65\x73\x74\x64\x61\x74\x61\x74\x65\x73\x74\x69\x6e\x66\x6f"

  // Find all matches using MoonBit implementation
  let actual_matches = find_all_matches(input)

  // Verify we found the expected number of matches
  @json.inspect(actual_matches.length(), content=1)

  // Verify first few matches (to avoid huge test output)
  // First match: backref=524292, pos=8
  if actual_matches.length() > 0 {
    let (first_backref, first_pos) = actual_matches[0]
    @json.inspect((first_backref, first_pos), content=[524292, 8])
  }
}

///|
/// Test case 9: window_boundary
/// Test window size boundary (32768)
/// Input length: 7000, Expected matches: 6990
test "lz77_reference_window_boundary" {
  // Input data
  let input = b"\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e\x70\x61\x74\x74\x65\x72\x6e"

  // Find all matches using MoonBit implementation
  let actual_matches = find_all_matches(input)

  // Verify we found the expected number of matches
  @json.inspect(actual_matches.length(), content=6990)

  // Verify first few matches (to avoid huge test output)
  // First match: backref=459010, pos=7
  if actual_matches.length() > 0 {
    let (first_backref, first_pos) = actual_matches[0]
    @json.inspect((first_backref, first_pos), content=[459010, 7])
  }
}

///|
/// Test case 10: empty
/// Empty data
/// Input length: 0, Expected matches: 0
test "lz77_reference_empty" {
  // Input data
  let input = b""
  // No matches expected for this test case
  let actual_matches = find_all_matches(input)
  @json.inspect(actual_matches.length(), content=0)
}

///|
/// Test case 11: single_byte
/// Single byte
/// Input length: 1, Expected matches: 0
test "lz77_reference_single_byte" {
  // Input data
  let input = b"\x41"
  // No matches expected for this test case
  let actual_matches = find_all_matches(input)
  @json.inspect(actual_matches.length(), content=0)
}

///|
/// Test case 12: two_bytes
/// Two bytes
/// Input length: 2, Expected matches: 0
test "lz77_reference_two_bytes" {
  // Input data
  let input = b"\x41\x42"
  // No matches expected for this test case
  let actual_matches = find_all_matches(input)
  @json.inspect(actual_matches.length(), content=0)
}

///|
/// Test case 13: almost_min_match
/// Almost minimum match
/// Input length: 6, Expected matches: 0
test "lz77_reference_almost_min_match" {
  // Input data
  let input = b"\x61\x62\x61\x20\x61\x62"
  // No matches expected for this test case
  let actual_matches = find_all_matches(input)
  @json.inspect(actual_matches.length(), content=0)
}

///|
/// Test case 14: json_pattern
/// JSON-like data with repeated patterns
/// Input length: 44, Expected matches: 10
test "lz77_reference_json_pattern" {
  // Input data
  let input = b"\x7b\x22\x6e\x61\x6d\x65\x22\x3a\x22\x74\x65\x73\x74\x22\x2c\x22\x64\x61\x74\x61\x22\x3a\x5b\x31\x2c\x32\x2c\x33\x5d\x2c\x22\x6e\x61\x6d\x65\x22\x3a\x22\x74\x65\x73\x74\x22\x7d"

  // Find all matches using MoonBit implementation
  let actual_matches = find_all_matches(input)

  // Verify we found the expected number of matches
  @json.inspect(actual_matches.length(), content=10)

  // Verify first few matches (to avoid huge test output)
  // First match: backref=1900557, pos=30
  if actual_matches.length() > 0 {
    let (first_backref, first_pos) = actual_matches[0]
    @json.inspect((first_backref, first_pos), content=[1900557, 30])
  }
}

///|
/// Helper function to find all LZ77 matches in data
fn find_all_matches(data : Bytes) -> Array[(Int, Int)] {
  let hash_head = Array::make(32768, -1)
  let hash_prev = Array::make(32768, 0)
  let mut matches = []

  // Process each position
  for pos = 0; pos < data.length(); pos = pos + 1 {
    if pos + 4 > data.length() {
      break
    }
    let hash_val = @lz77.hash4(data[pos:pos + 4])
    let backref = @lz77.find_backref(
      data, hash_head, hash_prev, pos, hash_val, 0, 258, 4, 4096,
    )
    if backref > 0 {
      matches = matches + [(backref, pos)]
    }
    @lz77.insert_hash(hash_head, hash_prev, hash_val, pos)
  }
  matches
}
