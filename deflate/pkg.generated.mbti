// Generated using `moon info`, DON'T EDIT IT
package "bobzhang/zip/deflate"

// Values
fn adler32_and_deflate(Bytes, Int, Int, DeflateLevel?) -> Result[(UInt, Bytes), String]

fn build_optimal_code_lengths(Array[Int], Int, Int) -> Array[Int]

fn crc32_and_deflate(Bytes, Int, Int, DeflateLevel?) -> Result[(UInt, Bytes), String]

fn deflate(Bytes, Int, Int, DeflateLevel?) -> Result[Bytes, String]

fn deflate_dynamic(Bytes, Int, Int, Bool, Int, Int) -> Bytes

fn deflate_fixed(Bytes, Int, Int, Bool, Int, Int) -> Bytes

fn deflate_fixed_literals_only(Bytes, Int, Int, Bool) -> Bytes

fn deflate_stored(Bytes, Int, Int) -> Bytes

fn distance_to_symbol(Int) -> Int

fn inflate(Bytes, Int, Int, Int?) -> Bytes

fn inflate_and_adler32(Bytes, Int, Int, Int?) -> (Bytes, UInt)

fn inflate_and_crc32(Bytes, Int, Int, Int?) -> (Bytes, UInt)

fn length_to_symbol(Int) -> Int

fn zlib_compress(Bytes, Int, Int, DeflateLevel?) -> (UInt, Bytes)

fn zlib_decompress(Bytes, Int, Int) -> Result[(Bytes, UInt), String]

// Errors

// Types and methods
pub(all) enum DeflateLevel {
  None
  Fast
  Default
  Best
}
impl Eq for DeflateLevel
impl Show for DeflateLevel

// Type aliases

// Traits

