// Generated using `moon info`, DON'T EDIT IT
package "bobzhang/zip"

import(
  "bobzhang/zip/member"
  "bobzhang/zip/types"
  "moonbitlang/core/immut/sorted_map"
)

// Values
fn bytes_has_zip_magic(Bytes) -> Bool

let dos_epoch : @types.Ptime

let gp_flag_encrypted : UInt16

let gp_flag_utf8 : UInt16

let max_file_size : Int64

let max_member_count : Int

let max_path_length : Int

// Errors

// Types and methods
type Archive
fn Archive::add(Self, @member.Member) -> Self
fn Archive::empty() -> Self
fn Archive::encoding_size(Self) -> Int
fn Archive::find(Self, String) -> @member.Member?
fn[T] Archive::fold(Self, (@member.Member, T) -> T, T) -> T
fn Archive::is_empty(Self) -> Bool
fn Archive::mem(Self, String) -> Bool
fn Archive::member_count(Self) -> Int
fn Archive::of_bytes(Bytes) -> Result[Self, String]
fn Archive::of_map(@sorted_map.SortedMap[String, @member.Member]) -> Self
fn Archive::remove(Self, String) -> Self
fn Archive::to_array(Self) -> Array[@member.Member]
fn Archive::to_bytes(Self, String?) -> Result[Bytes, String]
fn Archive::to_map(Self) -> @sorted_map.SortedMap[String, @member.Member]
fn Archive::write_bytes(Self, Bytes, Int, String?) -> Result[Int, String]

// Type aliases
pub typealias @bobzhang/zip/bitstream.BitWriter as BitWriter

pub typealias @bobzhang/zip/buffer.ByteBuf as ByteBuf

pub typealias @types.Compression as Compression

pub typealias @bobzhang/zip/deflate.DeflateLevel as DeflateLevel

pub typealias @bobzhang/zip/file.File as File

pub typealias Int as FileMode

pub typealias String as Fpath

pub typealias @bobzhang/zip/huffman.HuffmanDecoder as HuffmanDecoder

pub typealias @bobzhang/zip/huffman.HuffmanEncoder as HuffmanEncoder

pub typealias @member.Member as Member

pub typealias @member.MemberKind as MemberKind

pub typealias @types.Ptime as Ptime

pub typealias Int as SymInfo

// Traits

