// Generated using `moon info`, DON'T EDIT IT
package "bobzhang/zip"

import(
  "bobzhang/zip/deflate"
  "bobzhang/zip/file"
  "moonbitlang/core/immut/sorted_map"
)

// Values
fn adler32_and_deflate(Bytes, Int, Int, @deflate.DeflateLevel?) -> Result[(UInt, Bytes), String]

fn bytes_adler32(Bytes, Int, Int) -> UInt

fn bytes_crc32(Bytes, Int, Int) -> UInt

fn bytes_has_zip_magic(Bytes) -> Bool

fn check_adler32(UInt, UInt) -> Result[Unit, String]

fn check_crc32(UInt, UInt) -> Result[Unit, String]

fn crc32_and_deflate(Bytes, Int, Int, @deflate.DeflateLevel?) -> Result[(UInt, Bytes), String]

fn deflate(Bytes, Int, Int, @deflate.DeflateLevel?) -> Result[Bytes, String]

fn deflate_dynamic(Bytes, Int, Int, Bool, Int, Int) -> Bytes

fn deflate_fixed(Bytes, Int, Int, Bool, Int, Int) -> Bytes

fn deflate_fixed_literals_only(Bytes, Int, Int, Bool) -> Bytes

fn deflate_stored(Bytes, Int, Int) -> Bytes

let dist_value_of_sym : Array[Int]

fn distance_to_symbol(Int) -> Int

let dos_epoch : Int

fn format_file_mode(Int) -> String

fn fpath_ensure_directoryness(String) -> String

fn fpath_ensure_unix(String) -> String

fn fpath_sanitize(String) -> String

let gp_flag_encrypted : Int

let gp_flag_utf8 : Int

fn inflate(Bytes, Int, Int, Int?) -> Bytes

fn inflate_and_adler32(Bytes, Int, Int, Int?) -> (Bytes, UInt)

fn inflate_and_crc32(Bytes, Int, Int, Int?) -> (Bytes, UInt)

fn length_to_symbol(Int) -> Int

let length_value_of_sym_table : Array[Int]

let max_file_size : Int64

let max_member_count : Int

let max_path_length : Int

fn ptime_format(Int) -> String

fn ptime_of_dos_date_time(Int, Int) -> Int

fn ptime_to_date_time(Int) -> ((Int, Int, Int), (Int, Int, Int))

fn ptime_to_dos_date_time(Int) -> (Int, Int)

fn zlib_compress(Bytes, Int, Int, @deflate.DeflateLevel?) -> (UInt, Bytes)

fn zlib_decompress(Bytes, Int, Int) -> Result[(Bytes, UInt), String]

// Errors

// Types and methods
pub struct Archive {
  members : @sorted_map.SortedMap[String, Member]
}
fn Archive::add(Self, Member) -> Self
fn Archive::empty() -> Self
fn Archive::encoding_size(Self) -> Int
fn Archive::find(Self, String) -> Member?
fn[T] Archive::fold(Self, (Member, T) -> T, T) -> T
fn Archive::is_empty(Self) -> Bool
fn Archive::mem(Self, String) -> Bool
fn Archive::member_count(Self) -> Int
fn Archive::of_bytes(Bytes) -> Result[Self, String]
fn Archive::of_map(@sorted_map.SortedMap[String, Member]) -> Self
fn Archive::remove(Self, String) -> Self
fn Archive::to_array(Self) -> Array[Member]
fn Archive::to_bytes(Self, String?) -> Result[Bytes, String]
fn Archive::to_map(Self) -> @sorted_map.SortedMap[String, Member]
fn Archive::write_bytes(Self, Bytes, Int, String?) -> Result[Int, String]

pub struct Member {
  path : String
  kind : MemberKind
  mode : Int
  mtime : Int
}
fn Member::format(Self) -> String
fn Member::format_long(Self) -> String
fn Member::is_dir(Self) -> Bool
fn Member::is_file(Self) -> Bool
fn Member::kind(Self) -> MemberKind
fn Member::make(String, MemberKind, Int?, Int?) -> Result[Self, String]
fn Member::mode(Self) -> Int
fn Member::mtime(Self) -> Int
fn Member::path(Self) -> String

pub(all) enum MemberKind {
  Dir
  File(@file.File)
}

// Type aliases
pub typealias @bobzhang/zip/checksum/adler32.Adler32 as Adler32

pub typealias @bobzhang/zip/bitstream.BitWriter as BitWriter

pub typealias @bobzhang/zip/buffer.ByteBuf as ByteBuf

pub typealias @bobzhang/zip/types.Compression as Compression

pub typealias @bobzhang/zip/checksum/crc32.Crc32 as Crc32

pub typealias @deflate.DeflateLevel as DeflateLevel

pub typealias @file.File as File

pub typealias Int as FileMode

pub typealias String as Fpath

pub typealias @bobzhang/zip/huffman.HuffmanDecoder as HuffmanDecoder

pub typealias @bobzhang/zip/huffman.HuffmanEncoder as HuffmanEncoder

pub typealias Int as Ptime

pub typealias Int as SymInfo

// Traits

